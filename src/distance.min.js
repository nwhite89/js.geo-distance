/**
 * @author  Nick White <nickswhite89@gmail.com>
 * @description Returns the distance between Longitude and Latitude geographical
 *              distances
 * @version 1.0.0
 * @copyright Nick White
 *
 * Free to use under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 *
 * Based Latitude/longitude spherical geodesy formulae & scripts
 * Copyright 2011 Chris Veness
 * Project Home: www.movable-type.co.uk/scripts/latlong.html
 *
 */
(function(){if(typeof Number.prototype.toRad==="undefined"){Number.prototype.toRad=function(){return this*Math.PI/180}}window.geoDistance={init:function(e,t,n,r){r=r||2;n=n||"km";var i=this.distances[n],s=parseFloat(e.lng),o=parseFloat(e.lat);o=o.toRad();for(var u=t.length-1;u>=0;u--){var a=t[u],f=parseFloat(a.lat),l=parseFloat(a.lng),c=(o-f).toRad(),h=(s-l).toRad(),p={earthRadius:i,decimals:r,dLat:c,dLng:h,toLng:l,fromLat:o};p["toLat"]=f.toRad();t[u]["distance"]=this.retrieveDistance(p)}return t},retrieveDistance:function(e){var t=e.earthRadius,n=e.decimals,r=e.dLat,i=e.dLng,s=e.toLat,o=e.toLng,u=e.fromLat,a=Math.sin(r/2)*Math.sin(r/2)+Math.sin(i/2)*Math.sin(i/2)*Math.cos(s)*Math.cos(u),f=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),l=t*f,c=Math.round(l*Math.pow(10,n))/Math.pow(10,n)*1e3;return c},distances:{km:6371,miles:3959,metres:6371e3,yards:6967410,feet:20902231}}})()